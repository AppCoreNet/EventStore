// <auto-generated />
using System;
using AppCoreNet.EventStore.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppCoreNet.EventStore.SqlServer.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20250629122713_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.Event", b =>
                {
                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequence"), 0L);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventStreamId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sequence");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Sequence"));

                    b.HasIndex("EventStreamId");

                    b.HasIndex("EventStreamId", "Index")
                        .IsUnique();

                    b.ToTable("Event", "events");
                });

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.EventStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<int>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Sequence");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.ToTable("EventStream", "events");
                });

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.EventSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Position");

                    b.HasIndex("ProcessedAt");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("EventSubscription", "events");
                });

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.WatchEventsResult", b =>
                {
                    b.Property<long?>("Position")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.WatchSubscriptionsResult", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<long?>("Position")
                        .HasColumnType("bigint");

                    b.Property<string>("StreamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.WriteEventsResult", b =>
                {
                    b.Property<long?>("Index")
                        .HasColumnType("bigint");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("AppCoreNet.EventStore.SqlServer.Model.Event", b =>
                {
                    b.HasOne("AppCoreNet.EventStore.SqlServer.Model.EventStream", "EventStream")
                        .WithMany()
                        .HasForeignKey("EventStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventStream");
                });
#pragma warning restore 612, 618
        }
    }
}
